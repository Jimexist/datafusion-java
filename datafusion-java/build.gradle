plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'datafusion.java-conventions'
    id 'com.diffplug.spotless'
    id 'com.google.osdetector'
}

dependencies {
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.0'
    implementation 'org.apache.arrow:arrow-format:7.0.0'
    implementation 'org.apache.arrow:arrow-vector:7.0.0'
    runtimeOnly 'org.apache.arrow:arrow-memory-unsafe:7.0.0'
}

spotless {
    java {
        googleJavaFormat()
    }
}

java {
    withJavadocJar()
    withSourcesJar()

    compileJava {
        options.compilerArgs += ["-h", "${buildDir}/target/headers"]
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

task cargoReleaseBuild(type: Exec) {
    workingDir '../datafusion-jni'
    executable "${System.getProperty('user.home')}/.cargo/bin/cargo"
    args += ['build', '--release']
}

task OsxJar(type: Jar) {
    from sourceSets.main.output
    from layout.buildDirectory.file("../../datafusion-jni/target/release/libdatafusion_jni.dylib")
    archiveClassifier.set("osx-x86_64")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId 'datafusion-java'
            from(components.java)
            artifact OsxJar
            pom {
                name = 'DataFusion Java'
                description = 'A Java binding to Apache Arrow DataFusion library'
                url = 'https://github.com/datafusion-contrib/datafusion-java'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'dev'
                        name = 'Apache Arrow Developers'
                        email = 'dev@arrow.apache.org'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:datafusion-contrib/datafusion-java.git'
                    developerConnection = 'scm:git:https://github.com/datafusion-contrib/datafusion-java.git'
                    url = 'https://github.com/datafusion-contrib/datafusion-java'
                }
            }
        }
    }
    repositories {
        maven {
            name = "Sonatype"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = findProperty('ossrhUsername') ?: System.getenv("MAVEN_USERNAME")
                password = findProperty('ossrhPassword') ?: System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

//static String getLibExtension(classifier = osdetector.classifier) {
//    if (classifier.startsWith("windows")) {
//        return "dll"
//    } else if (classifier.startsWith("linux")) {
//        return "so"
//    } else if (classifier.startsWith("osx")) {
//        return "dylib"
//    } else {
//        throw new GradleException("Unsupported OS in classifier ${classifier}")
//    }
//}
//
//def supportedClassifiers = ["linux-x86_64", "osx-x86_64",]
//
//supportedClassifiers.each { classifier ->
//    def extension = getLibExtension(classifier)
//    def source = layout.buildDirectory.file("../../datafusion-jni/target/release/libdatafusion_jni.$extension").get().asFile
//    if (source.exists()) {
//        publishing.publications.mavenJava.artifacts.artifact([
//                source    : source,
//                classifier: classifier,
//                extension : extension
//        ])
//    }
//}


signing {
    required { !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("publish") }
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.mavenJava
}
