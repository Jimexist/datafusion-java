plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'datafusion.java-conventions'
    id 'com.diffplug.spotless'
    id 'com.google.osdetector'
}

dependencies {
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.0'
    implementation 'org.apache.arrow:arrow-format:7.0.0'
    implementation 'org.apache.arrow:arrow-vector:7.0.0'
    runtimeOnly 'org.apache.arrow:arrow-memory-unsafe:7.0.0'
}

spotless {
    java {
        googleJavaFormat()
    }
}

java {
    withJavadocJar()
    withSourcesJar()

    compileJava {
        options.compilerArgs += ["-h", "${buildDir}/target/headers"]
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

task cargoReleaseBuild(type: Exec) {
    workingDir '../datafusion-jni'
    executable "${System.getProperty('user.home')}/.cargo/bin/cargo"
    args += ['build', '--release']
}

@SuppressWarnings('GrMethodMayBeStatic')
String getLibExtension() {
    if (osdetector.os == "windows") {
        return "dll"
    } else if (osdetector.os == "linux") {
        return "so"
    } else if (osdetector.os == "osx") {
        return "dylib"
    } else {
        throw new GradleException("Unsupported OS ${osdetector.os}")
    }
}

PublishArtifact getArtifact(String extension, String classifier) {
    def jniFile = layout.buildDirectory.file("../../datafusion-jni/target/release/libdatafusion_jni.$extension")
    return artifacts.add('archives', jniFile.get().asFile) {
        type = extension
        extension = extension
        classifier = classifier
    }
}

publishing {
    publications {
        if (System.getenv("CI") != null) {
            mavenJava(MavenPublication) {
                artifactId = 'datafusion-java'
                from(components.java)
                artifact getArtifact("so", "linux-x86_64")
                artifact getArtifact("dylib", "osx-x86_64")
                pom {
                    name = 'DataFusion Java'
                    description = 'A Java binding to Apache Arrow DataFusion library'
                    url = 'https://github.com/datafusion-contrib/datafusion-java'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                }
            }
        } else {
            mavenJava(MavenPublication) {
                artifactId = 'datafusion-java'
                from(components.java)
                artifact getArtifact(getLibExtension(), osdetector.classifier)
                pom {
                    name = 'DataFusion Java'
                    description = 'A Java binding to Apache Arrow DataFusion library'
                    url = 'https://github.com/datafusion-contrib/datafusion-java'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                }
            }
        }

    }
    repositories {
        maven {
            name = "Sonatype"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = findProperty('ossrhUsername')
                password = findProperty('ossrhPassword')
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
