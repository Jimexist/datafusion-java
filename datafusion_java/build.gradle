/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.2/samples
 */
plugins {
    id 'java-library'
    id 'maven-publish'
    id 'datafusion.java-conventions'
    id 'com.diffplug.spotless'
}

spotless {
    java {
        googleJavaFormat()
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        gpr(MavenPublication) {
            artifactId = 'datafusion-java'
            from(components.java)
            pom {
                name = 'Datafuion Java'
                description = 'A Java binding to Apache Arrow Datafusion library'
                url = 'https://github.com/Jimexist/datafusion-java'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Jimexist/datafusion-java")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

dependencies {
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.1'
    // https://mvnrepository.com/artifact/org.apache.arrow/arrow-format
    implementation 'org.apache.arrow:arrow-format:5.0.0'
    // https://mvnrepository.com/artifact/org.apache.arrow/arrow-vector
    implementation 'org.apache.arrow:arrow-vector:5.0.0'
    // https://mvnrepository.com/artifact/org.apache.arrow/arrow-memory-netty
    runtimeOnly 'org.apache.arrow:arrow-memory-netty:5.0.0'
}

task generateJniHeaders(type: JavaCompile) {
    classpath = sourceSets.main.compileClasspath
    destinationDir file("${buildDir}/generated/jni")
    source = sourceSets.main.java
    options.compilerArgs += [
            '-h', file("${buildDir}/generated/jni"),
            '-d', file("${buildDir}/generated/jni-tmp")
    ]
    // options.verbose = true
    doLast {
        delete file("${buildDir}/generated/jni-tmp")
    }
}

tasks.register('cargoBuild') {
    doLast {
        exec {
            workingDir "${workingDir}/../datafusion_jni"
            executable 'cargo'
            args 'build'
        }
    }
}
